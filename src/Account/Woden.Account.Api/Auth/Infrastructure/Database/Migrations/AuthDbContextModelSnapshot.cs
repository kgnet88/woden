// <auto-generated />
using System;
using Goedde88.Woden.Account.Api.Auth.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Migrations;

[DbContext(typeof(AuthDbContext))]
partial class AuthDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasDefaultSchema("auth")
            .HasAnnotation("ProductVersion", "6.0.8")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRole", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("Roles", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRoleClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("RoleClaims", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("Users", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserClaims", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserLogin", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("UserLogins", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserRole", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRoles", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserToken", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("UserTokens", "auth");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRoleClaim", b =>
            {
                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRole", "Role")
                    .WithMany("RoleClaims")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserClaim", b =>
            {
                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", "User")
                    .WithMany("Claims")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserLogin", b =>
            {
                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", "User")
                    .WithMany("Logins")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserRole", b =>
            {
                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRole", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");

                b.Navigation("User");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUserToken", b =>
            {
                b.HasOne("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", "User")
                    .WithMany("Tokens")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbRole", b =>
            {
                b.Navigation("RoleClaims");

                b.Navigation("UserRoles");
            });

        modelBuilder.Entity("Goedde88.Woden.Account.Api.Auth.Infrastructure.Database.Model.DbUser", b =>
            {
                b.Navigation("Claims");

                b.Navigation("Logins");

                b.Navigation("Tokens");

                b.Navigation("UserRoles");
            });
#pragma warning restore 612, 618
    }
}
